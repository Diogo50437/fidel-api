{
  "version": 3,
  "sources": ["../../../../src/handlers/linking_handler.ts"],
  "sourcesContent": ["import { APIGatewayProxyHandler } from 'aws-lambda';\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { DynamoDBDocumentClient, UpdateCommand } from '@aws-sdk/lib-dynamodb';\n\nconst client = DynamoDBDocumentClient.from(new DynamoDBClient({}));\n\nexport const handler: APIGatewayProxyHandler = async (event) => {\n  try {\n    const body = JSON.parse(event.body || '{}');\n    const offerId = body.id;\n    const locationId = body.locationId;\n\n    if (!offerId || !locationId) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ error: 'Offer ID is required for update' }),\n      };\n    }\n\n    //Update the offer entry\n    const updateOfferCommand = new UpdateCommand({\n        TableName: 'OffersTable',\n        Key: { id: offerId },\n        UpdateExpression: `\n        SET #locationsTotal = if_not_exists(#locationsTotal, :zero) + :inc,\n            #locationsId = list_append(if_not_exists(#locationsId, :emptyList), :newLocation)\n        `,\n        ExpressionAttributeNames: {\n            '#locationsTotal': 'locationsTotal',\n            '#locationsId': 'locationsId',\n        },\n        ExpressionAttributeValues: {\n            ':inc': 1,\n            ':zero': 0,\n            ':emptyList': [],\n            ':newLocation': [locationId],\n        },\n        ReturnValues: 'UPDATED_NEW',\n    });\n    \n    await client.send(updateOfferCommand);\n\n    //Update the location entry\n    const updateLocationCommand = new UpdateCommand({\n      TableName: 'LocationsTable',\n      Key: { id: locationId },\n      UpdateExpression: 'SET #hasOffer = :true',\n      ExpressionAttributeNames: {\n        '#hasOffer': 'hasOffer',\n      },\n      ExpressionAttributeValues: {\n        ':true': true,\n      },\n    });\n\n    await client.send(updateLocationCommand);\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ message: 'Location linked to Offer successfully'}),\n    };\n  } catch (error) {\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: 'Internal server error', details: (error as Error).message }),\n    };\n  }\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,6BAA+B;AAC/B,0BAAsD;AAEtD,IAAM,SAAS,2CAAuB,KAAK,IAAI,sCAAe,CAAC,CAAC,CAAC;AAE1D,IAAM,UAAkC,OAAO,UAAU;AAC9D,MAAI;AACF,UAAM,OAAO,KAAK,MAAM,MAAM,QAAQ,IAAI;AAC1C,UAAM,UAAU,KAAK;AACrB,UAAM,aAAa,KAAK;AAExB,QAAI,CAAC,WAAW,CAAC,YAAY;AAC3B,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,kCAAkC,CAAC;AAAA,MACnE;AAAA,IACF;AAGA,UAAM,qBAAqB,IAAI,kCAAc;AAAA,MACzC,WAAW;AAAA,MACX,KAAK,EAAE,IAAI,QAAQ;AAAA,MACnB,kBAAkB;AAAA;AAAA;AAAA;AAAA,MAIlB,0BAA0B;AAAA,QACtB,mBAAmB;AAAA,QACnB,gBAAgB;AAAA,MACpB;AAAA,MACA,2BAA2B;AAAA,QACvB,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,cAAc,CAAC;AAAA,QACf,gBAAgB,CAAC,UAAU;AAAA,MAC/B;AAAA,MACA,cAAc;AAAA,IAClB,CAAC;AAED,UAAM,OAAO,KAAK,kBAAkB;AAGpC,UAAM,wBAAwB,IAAI,kCAAc;AAAA,MAC9C,WAAW;AAAA,MACX,KAAK,EAAE,IAAI,WAAW;AAAA,MACtB,kBAAkB;AAAA,MAClB,0BAA0B;AAAA,QACxB,aAAa;AAAA,MACf;AAAA,MACA,2BAA2B;AAAA,QACzB,SAAS;AAAA,MACX;AAAA,IACF,CAAC;AAED,UAAM,OAAO,KAAK,qBAAqB;AAEvC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,wCAAuC,CAAC;AAAA,IAC1E;AAAA,EACF,SAAS,OAAO;AACd,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,yBAAyB,SAAU,MAAgB,QAAQ,CAAC;AAAA,IAC5F;AAAA,EACF;AACF;",
  "names": []
}
